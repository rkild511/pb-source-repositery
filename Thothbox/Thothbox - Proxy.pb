; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; AUTOMATICALLY GENERATED CODE, DO NOT MODIFY
; UNLESS YOU REALLY,REALLY, REALLY MEAN IT !!
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; Code generated by : Dev-Type V3.0.3
; Project name : Thothbox
; File name : Thothbox - Proxy.pb
; File Version : 0.0.0
; Programmation : In progress
; Programmed by : Your name here
; AKA : Your NickName here
; E-mail : address@something.com
; Creation Date : 11-09-2011
; Last update : 14-09-2011
; Coded for PureBasic V4.60
; Platform : Windows, Linux, MacOS X
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; Notes : Proxy Preference command
;
; The Login and Password string are XOR encoded in the 
; preference file for a minimum security of these sensible 
; information. For the moment, the default empty Key is used 
; but it's possible to use the #prg_name$ instead. See
; ReadPreferenceProxy() and WritePreferenceProxy() for 
; details.
;
; And see XOREncodeString() in the source code file named
; "Thothbox - Support Function.pb" for detail about the
; XOR string encoding process.
;
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; <<<<< Structure declaration <<<<<

Structure Proxy

  IsRequired.b
  Host.s
  Port.l
  Login.s
  Password.s

EndStructure

; <<<<<<<<<<<<<<<<<<<<<<<<<<<
; <<<<< The observators <<<<<

Macro GetProxyIsRequired(ProxyA)

  ProxyA\IsRequired

EndMacro

Macro GetProxyHost(ProxyA)

  ProxyA\Host

EndMacro

Macro GetProxyPort(ProxyA)

  ProxyA\Port

EndMacro

Macro GetProxyLogin(ProxyA)

  ProxyA\Login

EndMacro

Macro GetProxyPassword(ProxyA)

  ProxyA\Password

EndMacro

; <<<<<<<<<<<<<<<<<<<<<<<<
; <<<<< The mutators <<<<<

Macro SetProxyIsRequired(ProxyA, P_IsRequired)

  GetProxyIsRequired(ProxyA) = P_IsRequired

EndMacro

Macro SetProxyHost(ProxyA, P_Host)

  GetProxyHost(ProxyA) = P_Host

EndMacro

Macro SetProxyPort(ProxyA, P_Port)

  GetProxyPort(ProxyA) = P_Port

EndMacro

Macro SetProxyLogin(ProxyA, P_Login)

  GetProxyLogin(ProxyA) = P_Login

EndMacro

Macro SetProxyPassword(ProxyA, P_Password)

  GetProxyPassword(ProxyA) = P_Password

EndMacro

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; <<<<< The Reset operator <<<<<

Macro ResetProxy(ProxyA)
  
  SetProxyIsRequired(ProxyA, 0)
  SetProxyHost(ProxyA, "")
  SetProxyPort(ProxyA, 0)
  SetProxyLogin(ProxyA, "")
  SetProxyPassword(ProxyA, "")
  
EndMacro

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; <<<<< The Initialize operator <<<<<

Procedure InitializeProxy(*ProxyA.Proxy)
  
  SetProxyIsRequired(*ProxyA, #False)
  SetProxyHost(*ProxyA, "spxy.bpi.fr")
  SetProxyPort(*ProxyA, 3128)
  SetProxyLogin(*ProxyA, "")
  SetProxyPassword(*ProxyA, "")

EndProcedure

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; <<<<< Code generated in : 00.008 seconds (15875.00 lines/second) <<<<<
; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; <<<<< FormatProxy Operator <<<<<

Procedure.s FormatProxy(*ProxyA.Proxy)
  
  If GetProxyIsRequired(*ProxyA) = #True And GetProxyLogin(*ProxyA) <> ""
    Temp_Login_Password.s = GetProxyLogin(*ProxyA) + ":" + GetProxyPassword(*ProxyA)
    Formated_Login_Password.s = Space(Len(Temp_Login_Password) * 4)
    Base64Encoder(@Temp_Login_Password, Len(Temp_Login_Password), @Formated_Login_Password, Len(Temp_Login_Password) * 4)
  EndIf
  
  ProcedureReturn Formated_Login_Password
EndProcedure 

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; <<<<< Read preferences group <<<<<

Procedure ReadPreferenceProxy(GroupName.s, *ProxyA.Proxy)

  PreferenceGroup(GroupName)
  
  SetProxyIsRequired(*ProxyA, ReadPreferenceLong("IsRequired", GetProxyIsRequired(*ProxyA)))
  SetProxyHost(*ProxyA, ReadPreferenceString("Host", GetProxyHost(*ProxyA)))
  SetProxyPort(*ProxyA, ReadPreferenceLong("Port", GetProxyPort(*ProxyA)))
  SetProxyLogin(*ProxyA, XOREncodeString("", ReadPreferenceString("Login", GetProxyLogin(*ProxyA))))
  SetProxyPassword(*ProxyA, XOREncodeString("", ReadPreferenceString("Password", GetProxyPassword(*ProxyA))))
  
EndProcedure

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; <<<<< Write preferences group <<<<<

Procedure WritePreferenceProxy(GroupName.s, *ProxyA.Proxy)

  PreferenceGroup(GroupName)
  
  WritePreferenceLong("IsRequired", GetProxyIsRequired(*ProxyA))
  WritePreferenceString("Host", GetProxyHost(*ProxyA))
  WritePreferenceLong("Port", GetProxyPort(*ProxyA))
  WritePreferenceString("Login", XOREncodeString("", GetProxyLogin(*ProxyA)))
  WritePreferenceString("Password", XOREncodeString("", GetProxyPassword(*ProxyA)))
  
EndProcedure

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; <<<<< Tranfer Proxy information from GUI to Proxy Structure <<<<<

Procedure GUI_To_Proxy(*ProxyA.Proxy)
  
  If GetGadgetState(#CheckBox_UseProxy) = #True
    SetProxyIsRequired(*ProxyA, #True)
  Else
    SetProxyIsRequired(*ProxyA, #False)
  EndIf
  
  SetProxyHost(*ProxyA, GetGadgetText(#String_ProxyHost))
  SetProxyPort(*ProxyA, GetGadgetState(#Spin_ProxyPort))
  SetProxyLogin(*ProxyA, GetGadgetText(#String_ProxyLogin))
  SetProxyPassword(*ProxyA, GetGadgetText(#String_ProxyPassword))
  
  DisableDependentGadget(#CheckBox_UseProxy, #String_ProxyPassword)

EndProcedure

; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; <<<<< Tranfer Proxy information from Proxy Structure to GUI <<<<<

Procedure Proxy_To_GUI(*ProxyA.Proxy)
  
  If GetProxyIsRequired(*ProxyA) = #True
    SetGadgetState(#CheckBox_UseProxy, #True)
  EndIf
  
  SetGadgetText(#String_ProxyHost, GetProxyHost(*ProxyA))
  SetGadgetState(#Spin_ProxyPort, GetProxyPort(*ProxyA))
  SetGadgetText(#String_ProxyLogin, GetProxyLogin(*ProxyA))
  SetGadgetText(#String_ProxyPassword, GetProxyPassword(*ProxyA))
  DisableDependentGadget(#CheckBox_UseProxy, #String_ProxyPassword)
  
EndProcedure

; <<<<<<<<<<<<<<<<<<<<<<<
; <<<<< END OF FILE <<<<<
; <<<<<<<<<<<<<<<<<<<<<<<
; IDE Options = PureBasic 4.60 RC 1 (Linux - x64)
; CursorPosition = 203
; FirstLine = 180
; Folding = ----
; EnableXP